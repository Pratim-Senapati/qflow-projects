Qflow synthesis logfile created on Mon Feb 24 13:02:27 IST 2025
Running yosys for verilog parsing and synthesis
yosys  -s cordic.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `cordic.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/tombert/qflow_projects/sin_cos/source/sincos.v
Parsing Verilog input from `/home/tombert/qflow_projects/sin_cos/source/sincos.v' to AST representation.
Generating RTLIL representation for module `\cordic'.
Warning: reg '\sine' is assigned in a continuous assignment at /home/tombert/qflow_projects/sin_cos/source/sincos.v:50.
Warning: reg '\cosine' is assigned in a continuous assignment at /home/tombert/qflow_projects/sin_cos/source/sincos.v:51.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \cordic

3.1.2. Analyzing design hierarchy..
Top module:  \cordic
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 17 switch rules as full_case in process $proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:30$32 in module cordic.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:30$32'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
     1/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:27$31_DATA[15:0]$286
     2/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:27$31_ADDR[31:0]$285
     3/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:26$30_DATA[15:0]$284
     4/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:26$30_ADDR[31:0]$283
     5/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:25$29_DATA[15:0]$282
     6/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:25$29_ADDR[31:0]$281
     7/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:24$28_DATA[15:0]$280
     8/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:24$28_ADDR[31:0]$279
     9/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:23$27_DATA[15:0]$278
    10/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:23$27_ADDR[31:0]$277
    11/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:22$26_DATA[15:0]$276
    12/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:22$26_ADDR[31:0]$275
    13/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:21$25_DATA[15:0]$274
    14/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:21$25_ADDR[31:0]$273
    15/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:20$24_DATA[15:0]$272
    16/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:20$24_ADDR[31:0]$271
    17/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:19$23_DATA[15:0]$270
    18/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:19$23_ADDR[31:0]$269
    19/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:18$22_DATA[15:0]$268
    20/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:18$22_ADDR[31:0]$267
    21/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:17$21_DATA[15:0]$266
    22/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:17$21_ADDR[31:0]$265
    23/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:16$20_DATA[15:0]$264
    24/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:16$20_ADDR[31:0]$263
    25/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:15$19_DATA[15:0]$262
    26/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:15$19_ADDR[31:0]$261
    27/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:14$18_DATA[15:0]$260
    28/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:14$18_ADDR[31:0]$259
    29/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:13$17_DATA[15:0]$258
    30/30: $0$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:13$17_ADDR[31:0]$257
Creating decoders for process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:30$32'.
     1/5: $1\i[31:0]
     2/5: $0\i[31:0]
     3/5: $0\x[15:0]
     4/5: $0\z[15:0]
     5/5: $0\y[15:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:13$17_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:13$17_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:14$18_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:14$18_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:15$19_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:15$19_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:16$20_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:16$20_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:17$21_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:17$21_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:18$22_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:18$22_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:19$23_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:19$23_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:20$24_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:20$24_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:21$25_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:21$25_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:22$26_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:22$26_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:23$27_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:23$27_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:24$28_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:24$28_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:25$29_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:25$29_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:26$30_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:26$30_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:27$31_ADDR' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
No latch inferred for signal `\cordic.$memwr$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:27$31_DATA' from process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\cordic.\y' using process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:30$32'.
  created $adff cell `$procdff$431' with positive edge clock and positive level reset.
Creating register for signal `\cordic.\z' using process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:30$32'.
Warning: Async reset value `\theta' is not constant!
  created $dffsr cell `$procdff$432' with positive edge clock and positive level non-const reset.
Creating register for signal `\cordic.\x' using process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:30$32'.
  created $adff cell `$procdff$439' with positive edge clock and positive level reset.
Creating register for signal `\cordic.\i' using process `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:30$32'.
  created $dff cell `$procdff$440' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:12$256'.
Found and cleaned up 16 empty switches in `\cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:30$32'.
Removing empty process `cordic.$proc$/home/tombert/qflow_projects/sin_cos/source/sincos.v:30$32'.
Cleaned up 16 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~64 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 181 unused cells and 358 unused wires.
<suppressed ~183 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module cordic..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:13$241 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:14$242 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:15$243 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:16$244 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:17$245 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:18$246 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:19$247 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:20$248 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:21$249 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:22$250 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:23$251 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:24$252 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:25$253 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:26$254 (atan_table).
Removed top 28 address bits (of 32) from memory init port cordic.$meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:27$255 (atan_table).
Removed top 28 address bits (of 32) from memory read port cordic.$memrd$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:40$233 (atan_table).
Removed top 31 bits (of 32) from port B of cell cordic.$ge$/home/tombert/qflow_projects/sin_cos/source/sincos.v:37$228 ($ge).
Removed top 15 bits (of 16) from port B of cell cordic.$sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:38$230 ($sub).
Removed top 15 bits (of 16) from port B of cell cordic.$add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:39$232 ($add).
Removed top 15 bits (of 16) from port B of cell cordic.$add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:42$236 ($add).
Removed top 15 bits (of 16) from port B of cell cordic.$sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:43$238 ($sub).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~20 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module cordic:
  creating $macc model for $add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:39$232 ($add).
  creating $macc model for $add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:42$236 ($add).
  creating $macc model for $add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:44$240 ($add).
  creating $macc model for $sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:38$230 ($sub).
  creating $macc model for $sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:40$234 ($sub).
  creating $macc model for $sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:43$238 ($sub).
  creating $alu model for $macc $sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:43$238.
  creating $alu model for $macc $sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:40$234.
  creating $alu model for $macc $sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:38$230.
  creating $alu model for $macc $add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:44$240.
  creating $alu model for $macc $add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:42$236.
  creating $alu model for $macc $add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:39$232.
  creating $alu model for $ge$/home/tombert/qflow_projects/sin_cos/source/sincos.v:37$228 ($ge): new $alu
  creating $alu cell for $ge$/home/tombert/qflow_projects/sin_cos/source/sincos.v:37$228: $auto$alumacc.cc:474:replace_alu$442
  creating $alu cell for $add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:39$232: $auto$alumacc.cc:474:replace_alu$451
  creating $alu cell for $add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:42$236: $auto$alumacc.cc:474:replace_alu$454
  creating $alu cell for $sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:38$230: $auto$alumacc.cc:474:replace_alu$457
  creating $alu cell for $add$/home/tombert/qflow_projects/sin_cos/source/sincos.v:44$240: $auto$alumacc.cc:474:replace_alu$460
  creating $alu cell for $sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:40$234: $auto$alumacc.cc:474:replace_alu$463
  creating $alu cell for $sub$/home/tombert/qflow_projects/sin_cos/source/sincos.v:43$238: $auto$alumacc.cc:474:replace_alu$466
  created 7 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$447: { $auto$alumacc.cc:490:replace_alu$443 [0] $auto$alumacc.cc:490:replace_alu$443 [1] $auto$alumacc.cc:490:replace_alu$443 [2] $auto$alumacc.cc:490:replace_alu$443 [3] $auto$alumacc.cc:490:replace_alu$443 [4] $auto$alumacc.cc:490:replace_alu$443 [5] $auto$alumacc.cc:490:replace_alu$443 [6] $auto$alumacc.cc:490:replace_alu$443 [7] $auto$alumacc.cc:490:replace_alu$443 [8] $auto$alumacc.cc:490:replace_alu$443 [9] $auto$alumacc.cc:490:replace_alu$443 [10] $auto$alumacc.cc:490:replace_alu$443 [11] $auto$alumacc.cc:490:replace_alu$443 [12] $auto$alumacc.cc:490:replace_alu$443 [13] $auto$alumacc.cc:490:replace_alu$443 [14] $auto$alumacc.cc:490:replace_alu$443 [15] }
  Optimizing cells in module \cordic.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memrd$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:40$233' in module `\cordic': no (compatible) $dff found.

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\atan_table' in module `\cordic':
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:13$241 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:14$242 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:15$243 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:16$244 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:17$245 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:18$246 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:19$247 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:20$248 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:21$249 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:22$250 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:23$251 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:24$252 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:25$253 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:26$254 ($meminit)
  $meminit$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:27$255 ($meminit)
  $memrd$\atan_table$/home/tombert/qflow_projects/sin_cos/source/sincos.v:40$233 ($memrd)

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \atan_table in module \cordic:
  created 16 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~15 debug messages>

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\atan_table[14]$498 ($dff) from module cordic.
Removing $memory\atan_table[13]$496 ($dff) from module cordic.
Removing $memory\atan_table[12]$494 ($dff) from module cordic.
Removing $memory\atan_table[11]$492 ($dff) from module cordic.
Removing $memory\atan_table[10]$490 ($dff) from module cordic.
Removing $memory\atan_table[9]$488 ($dff) from module cordic.
Removing $memory\atan_table[8]$486 ($dff) from module cordic.
Removing $memory\atan_table[7]$484 ($dff) from module cordic.
Removing $memory\atan_table[6]$482 ($dff) from module cordic.
Removing $memory\atan_table[5]$480 ($dff) from module cordic.
Removing $memory\atan_table[4]$478 ($dff) from module cordic.
Removing $memory\atan_table[3]$476 ($dff) from module cordic.
Removing $memory\atan_table[2]$474 ($dff) from module cordic.
Removing $memory\atan_table[1]$472 ($dff) from module cordic.
Removing $memory\atan_table[0]$470 ($dff) from module cordic.
Removing $memory\atan_table[15]$500 ($dff) from module cordic.
Replaced 16 DFF cells.

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 47 unused wires.
<suppressed ~1 debug messages>

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.20.9. Rerunning OPT passes. (Maybe there is more to do..)

3.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

3.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

3.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

3.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.20.16. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dffsr.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~706 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.
<suppressed ~666 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 87 unused cells and 433 unused wires.
<suppressed ~88 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\cordic' to `<abc-temp-dir>/input.blif'..
Extracted 365 gates and 432 wires to a netlist network with 65 inputs and 64 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              NAND cells:        7
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:        7
ABC RESULTS:              OAI3 cells:        3
ABC RESULTS:                OR cells:       23
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        8
ABC RESULTS:               XOR cells:       24
ABC RESULTS:        internal signals:      303
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       64
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 48 unused cells and 252 unused wires.
<suppressed ~50 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \cordic

3.25.2. Analyzing design hierarchy..
Top module:  \cordic
Removed 0 unused modules.

3.26. Printing statistics.

=== cordic ===

   Number of wires:                 85
   Number of wire bits:            430
   Number of public wires:          23
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                124
     $_ANDNOT_                      16
     $_AOI3_                         2
     $_DFF_PP0_                     23
     $_DFF_PP1_                      9
     $_NAND_                         7
     $_NOR_                          5
     $_NOT_                          7
     $_OAI3_                         3
     $_ORNOT_                        1
     $_OR_                          19
     $_XNOR_                         8
     $_XOR_                         24

3.27. Executing CHECK pass (checking for obvious problems).
checking module cordic..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\cordic':
  mapped 23 $_DFF_PP0_ cells to \DFFSR cells.
  mapped 9 $_DFF_PP1_ cells to \DFFSR cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..
Removed 0 unused cells and 31 unused wires.
<suppressed ~1 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\cordic' to `<abc-temp-dir>/input.blif'..
Extracted 93 gates and 126 wires to a netlist network with 33 inputs and 33 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        6
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:             INVX1 cells:       23
ABC RESULTS:           NAND2X1 cells:       17
ABC RESULTS:           NAND3X1 cells:        9
ABC RESULTS:            NOR2X1 cells:       12
ABC RESULTS:            NOR3X1 cells:        7
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:           XNOR2X1 cells:       14
ABC RESULTS:            XOR2X1 cells:        6
ABC RESULTS:        internal signals:       60
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       33
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 144 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port cordic.clk: Missing option -inpad.
Mapping port cordic.cosine using BUFX2.
Don't map input port cordic.rst: Missing option -inpad.
Mapping port cordic.sine using BUFX2.
Don't map input port cordic.theta: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cordic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cordic.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cordic'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cordic..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cordic.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== cordic ===

   Number of wires:                 80
   Number of wire bits:            185
   Number of public wires:          80
   Number of public wire bits:     185
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                167
     AND2X2                          6
     AOI21X1                         1
     BUFX2                          32
     DFFSR                          32
     INVX1                          23
     NAND2X1                        17
     NAND3X1                         9
     NOR2X1                         12
     NOR3X1                          7
     OAI21X1                         8
     XNOR2X1                        14
     XOR2X1                          6

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 9d2ac6e1ba
CPU: user 1.01s system 0.08s, MEM: 22.41 MB total, 15.93 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 17% 18x opt_expr (0 sec), 17% 18x opt_clean (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl cordic_mapped.blif cordic /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I cordic_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif cordic.blif

blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 32 (load 1128.79) from node _2_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 10.9808 (latency = 2196.15 ps)
Top input node fanout is 32 (load 430.301) from node clk.
Warning 1: load of 154.202 is 1.52156 times greater than strongest gate NAND3X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 7: load of 194.884 is 1.89369 times greater than strongest gate DFFSR
Warning 10: load of 224.605 is 2.18249 times greater than strongest gate DFFSR
Warning 11: load of 251.445 is 2.44329 times greater than strongest gate DFFSR
Warning 22: load of 294.996 is 2.86648 times greater than strongest gate DFFSR
41 gates exceed specified minimum load.
10 buffers were added.
1 gates were changed.

Gate counts by drive strength:

	"" gates	In: 32    	Out: 32    	+0
	"1" gates	In: 97    	Out: 96    	-1
	"2" gates	In: 38    	Out: 38    	+0

Number of gates changed: 11
gates resized: 11
blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 7 (load 462.716) from node _2__bF$buf4,
driven by BUFX2 with strength 208.34 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.76931 (latency = 553.862 ps)
Top input node fanout is 5 (load 274.602) from node clk.
Warning 1: load of 472.716 is 1.13154 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 6: load of 154.202 is 1.52156 times greater than strongest gate NAND3X1
Warning 11: load of 194.884 is 1.89369 times greater than strongest gate DFFSR
Warning 14: load of 224.605 is 2.18249 times greater than strongest gate DFFSR
Warning 15: load of 251.445 is 2.44329 times greater than strongest gate DFFSR
Warning 26: load of 294.996 is 2.86648 times greater than strongest gate DFFSR
45 gates exceed specified minimum load.
0 buffers were added.
5 gates were changed.

Gate counts by drive strength:

	"" gates	In: 32    	Out: 32    	+0
	"1" gates	In: 101    	Out: 101    	+0
	"2" gates	In: 43    	Out: 38    	-5
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 5
gates resized: 5
blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 7 (load 494.673) from node _2__bF$buf4,
driven by BUFX4 with strength 413.451 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.76931 (latency = 553.862 ps)
Top input node fanout is 5 (load 274.602) from node clk.
Warning 1: load of 472.716 is 1.13154 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 6: load of 504.673 is 1.22064 times greater than strongest gate BUFX4
Warning 11: load of 154.202 is 1.52156 times greater than strongest gate NAND3X1
Warning 16: load of 194.884 is 1.89369 times greater than strongest gate DFFSR
Warning 19: load of 224.605 is 2.18249 times greater than strongest gate DFFSR
Warning 20: load of 251.445 is 2.44329 times greater than strongest gate DFFSR
Warning 31: load of 294.996 is 2.86648 times greater than strongest gate DFFSR
50 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 32    	Out: 32    	+0
	"1" gates	In: 101    	Out: 101    	+0
	"2" gates	In: 38    	Out: 38    	+0
	"4" gates	In: 5    	Out: 5    	+0
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/tombert/qflow_projects/sin_cos/synthesis
Files:
   Verilog: /home/tombert/qflow_projects/sin_cos/synthesis/cordic.rtl.v
   Verilog: /home/tombert/qflow_projects/sin_cos/synthesis/cordic.rtlnopwr.v
   Verilog: /home/tombert/qflow_projects/sin_cos/synthesis/cordic.rtlbb.v
   Spice:   /home/tombert/qflow_projects/sin_cos/synthesis/cordic.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" cordic.spc cordic.xspice

Synthesis script ended on Mon Feb 24 13:02:29 IST 2025
