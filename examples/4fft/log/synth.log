Qflow synthesis logfile created on Tue Mar 25 15:53:04 IST 2025
Running yosys for verilog parsing and synthesis
yosys  -s fft_top.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `fft_top.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/tombert/qflow_projects/4fft/source/fft_top.v
Parsing Verilog input from `/home/tombert/qflow_projects/4fft/source/fft_top.v' to AST representation.
Generating RTLIL representation for module `\fft_top'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: fft_magnitude.v
Parsing Verilog input from `fft_magnitude.v' to AST representation.
Generating RTLIL representation for module `\fft_magnitude'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: fft_butterfly.v
Parsing Verilog input from `fft_butterfly.v' to AST representation.
Generating RTLIL representation for module `\fft_butterfly'.
Warning: Replacing memory \im_part with list of registers. See fft_butterfly.v:27
Warning: Replacing memory \re_part with list of registers. See fft_butterfly.v:22
Successfully finished Verilog frontend.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \fft_top
Used module:     \fft_magnitude
Used module:     \fft_butterfly

5.1.2. Analyzing design hierarchy..
Top module:  \fft_top
Used module:     \fft_magnitude
Used module:     \fft_butterfly
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$fft_butterfly.v:17$14 in module fft_butterfly.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_INIT pass (extract init attributes).

5.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\fft_butterfly.$proc$fft_butterfly.v:17$14'.

5.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
     1/17: $0\im_part[3][15:0]
     2/17: $0\im_part[2][15:0]
     3/17: $0\im_part[1][15:0]
     4/17: $0\im_part[0][15:0]
     5/17: $0\re_part[3][15:0]
     6/17: $0\re_part[2][15:0]
     7/17: $0\re_part[1][15:0]
     8/17: $0\re_part[0][15:0]
     9/17: $0\X3_imag[15:0]
    10/17: $0\X3_real[15:0]
    11/17: $0\X2_imag[15:0]
    12/17: $0\X2_real[15:0]
    13/17: $0\X1_imag[15:0]
    14/17: $0\X1_real[15:0]
    15/17: $0\X0_imag[15:0]
    16/17: $0\X0_real[15:0]
    17/17: $0\done[0:0]
Creating decoders for process `\fft_magnitude.$proc$fft_magnitude.v:10$1'.
     1/4: $0\X3_mag[7:0]
     2/4: $0\X2_mag[7:0]
     3/4: $0\X1_mag[7:0]
     4/4: $0\X0_mag[7:0]

5.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fft_butterfly.\done' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $adff cell `$procdff$61' with positive edge clock and positive level reset.
Creating register for signal `\fft_butterfly.\X0_real' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$62' with positive edge clock.
Creating register for signal `\fft_butterfly.\X0_imag' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$63' with positive edge clock.
Creating register for signal `\fft_butterfly.\X1_real' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$64' with positive edge clock.
Creating register for signal `\fft_butterfly.\X1_imag' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$65' with positive edge clock.
Creating register for signal `\fft_butterfly.\X2_real' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$66' with positive edge clock.
Creating register for signal `\fft_butterfly.\X2_imag' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$67' with positive edge clock.
Creating register for signal `\fft_butterfly.\X3_real' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$68' with positive edge clock.
Creating register for signal `\fft_butterfly.\X3_imag' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$69' with positive edge clock.
Creating register for signal `\fft_butterfly.\re_part[0]' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$70' with positive edge clock.
Creating register for signal `\fft_butterfly.\re_part[1]' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$71' with positive edge clock.
Creating register for signal `\fft_butterfly.\re_part[2]' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\fft_butterfly.\re_part[3]' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\fft_butterfly.\im_part[0]' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$74' with positive edge clock.
Creating register for signal `\fft_butterfly.\im_part[1]' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$75' with positive edge clock.
Creating register for signal `\fft_butterfly.\im_part[2]' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$76' with positive edge clock.
Creating register for signal `\fft_butterfly.\im_part[3]' using process `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
  created $dff cell `$procdff$77' with positive edge clock.
Creating register for signal `\fft_magnitude.\X0_mag' using process `\fft_magnitude.$proc$fft_magnitude.v:10$1'.
  created $dff cell `$procdff$78' with positive edge clock.
Creating register for signal `\fft_magnitude.\X1_mag' using process `\fft_magnitude.$proc$fft_magnitude.v:10$1'.
  created $dff cell `$procdff$79' with positive edge clock.
Creating register for signal `\fft_magnitude.\X2_mag' using process `\fft_magnitude.$proc$fft_magnitude.v:10$1'.
  created $dff cell `$procdff$80' with positive edge clock.
Creating register for signal `\fft_magnitude.\X3_mag' using process `\fft_magnitude.$proc$fft_magnitude.v:10$1'.
  created $dff cell `$procdff$81' with positive edge clock.

5.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\fft_butterfly.$proc$fft_butterfly.v:17$14'.
Removing empty process `fft_butterfly.$proc$fft_butterfly.v:17$14'.
Removing empty process `fft_magnitude.$proc$fft_magnitude.v:10$1'.
Cleaned up 1 empty switch.

5.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..
Removed 0 unused cells and 38 unused wires.
<suppressed ~2 debug messages>

5.5. Executing CHECK pass (checking for obvious problems).
checking module fft_butterfly..
checking module fft_magnitude..
checking module fft_top..
found and reported 0 problems.

5.6. Executing OPT pass (performing simple optimizations).

5.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

5.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_butterfly..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fft_magnitude..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fft_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

5.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_butterfly.
  Optimizing cells in module \fft_magnitude.
  Optimizing cells in module \fft_top.
Performed a total of 0 changes.

5.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

5.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$74 ($dff) from module fft_butterfly.
Removing $procdff$75 ($dff) from module fft_butterfly.
Removing $procdff$76 ($dff) from module fft_butterfly.
Removing $procdff$77 ($dff) from module fft_butterfly.
Replaced 4 DFF cells.

5.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

5.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
<suppressed ~7 debug messages>
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.6.9. Rerunning OPT passes. (Maybe there is more to do..)

5.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_butterfly..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fft_magnitude..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fft_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

5.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_butterfly.
  Optimizing cells in module \fft_magnitude.
  Optimizing cells in module \fft_top.
Performed a total of 0 changes.

5.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
<suppressed ~3 debug messages>
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 1 cells.

5.6.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$63 ($dff) from module fft_butterfly.
Removing $procdff$67 ($dff) from module fft_butterfly.
Replaced 2 DFF cells.

5.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..
Removed 2 unused cells and 7 unused wires.
<suppressed ~5 debug messages>

5.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.6.16. Rerunning OPT passes. (Maybe there is more to do..)

5.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_butterfly..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fft_magnitude..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fft_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

5.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_butterfly.
  Optimizing cells in module \fft_magnitude.
  Optimizing cells in module \fft_top.
Performed a total of 0 changes.

5.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

5.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

5.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..

5.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.6.23. Finished OPT passes. (There is nothing left to do.)

5.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 16) from port Y of cell fft_butterfly.$add$fft_butterfly.v:22$15 ($add).
Removed top 7 bits (of 16) from port Y of cell fft_butterfly.$add$fft_butterfly.v:23$16 ($add).
Removed top 15 bits (of 16) from port A of cell fft_butterfly.$sub$fft_butterfly.v:43$26 ($sub).
Removed top 7 bits (of 16) from wire fft_butterfly.$add$fft_butterfly.v:22$15_Y.
Removed top 7 bits (of 16) from wire fft_butterfly.$add$fft_butterfly.v:23$16_Y.

5.8. Executing PEEPOPT pass (run peephole optimizers).

5.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

5.10. Executing TECHMAP pass (map to technology primitives).

5.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

5.10.2. Continuing TECHMAP pass.
No more expansions possible.

5.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module fft_butterfly:
  creating $macc model for $add$fft_butterfly.v:22$15 ($add).
  creating $macc model for $add$fft_butterfly.v:23$16 ($add).
  creating $macc model for $add$fft_butterfly.v:33$19 ($add).
  creating $macc model for $sub$fft_butterfly.v:24$17 ($sub).
  creating $macc model for $sub$fft_butterfly.v:25$18 ($sub).
  creating $macc model for $sub$fft_butterfly.v:39$23 ($sub).
  creating $macc model for $sub$fft_butterfly.v:43$26 ($sub).
  creating $alu model for $macc $sub$fft_butterfly.v:43$26.
  creating $alu model for $macc $sub$fft_butterfly.v:39$23.
  creating $alu model for $macc $sub$fft_butterfly.v:25$18.
  creating $alu model for $macc $sub$fft_butterfly.v:24$17.
  creating $alu model for $macc $add$fft_butterfly.v:33$19.
  creating $alu model for $macc $add$fft_butterfly.v:23$16.
  creating $alu model for $macc $add$fft_butterfly.v:22$15.
  creating $alu cell for $add$fft_butterfly.v:22$15: $auto$alumacc.cc:474:replace_alu$84
  creating $alu cell for $add$fft_butterfly.v:33$19: $auto$alumacc.cc:474:replace_alu$87
  creating $alu cell for $sub$fft_butterfly.v:24$17: $auto$alumacc.cc:474:replace_alu$90
  creating $alu cell for $add$fft_butterfly.v:23$16: $auto$alumacc.cc:474:replace_alu$93
  creating $alu cell for $sub$fft_butterfly.v:25$18: $auto$alumacc.cc:474:replace_alu$96
  creating $alu cell for $sub$fft_butterfly.v:39$23: $auto$alumacc.cc:474:replace_alu$99
  creating $alu cell for $sub$fft_butterfly.v:43$26: $auto$alumacc.cc:474:replace_alu$102
  created 7 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module fft_magnitude:
  creating $macc model for $add$fft_magnitude.v:11$4 ($add).
  creating $macc model for $add$fft_magnitude.v:12$7 ($add).
  creating $macc model for $add$fft_magnitude.v:13$10 ($add).
  creating $macc model for $add$fft_magnitude.v:14$13 ($add).
  creating $macc model for $mul$fft_magnitude.v:11$2 ($mul).
  creating $macc model for $mul$fft_magnitude.v:11$3 ($mul).
  creating $macc model for $mul$fft_magnitude.v:12$5 ($mul).
  creating $macc model for $mul$fft_magnitude.v:12$6 ($mul).
  creating $macc model for $mul$fft_magnitude.v:13$8 ($mul).
  creating $macc model for $mul$fft_magnitude.v:13$9 ($mul).
  creating $macc model for $mul$fft_magnitude.v:14$11 ($mul).
  creating $macc model for $mul$fft_magnitude.v:14$12 ($mul).
  merging $macc model for $mul$fft_magnitude.v:14$11 into $add$fft_magnitude.v:14$13.
  merging $macc model for $mul$fft_magnitude.v:14$12 into $add$fft_magnitude.v:14$13.
  merging $macc model for $mul$fft_magnitude.v:13$8 into $add$fft_magnitude.v:13$10.
  merging $macc model for $mul$fft_magnitude.v:13$9 into $add$fft_magnitude.v:13$10.
  merging $macc model for $mul$fft_magnitude.v:12$5 into $add$fft_magnitude.v:12$7.
  merging $macc model for $mul$fft_magnitude.v:12$6 into $add$fft_magnitude.v:12$7.
  merging $macc model for $mul$fft_magnitude.v:11$2 into $add$fft_magnitude.v:11$4.
  merging $macc model for $mul$fft_magnitude.v:11$3 into $add$fft_magnitude.v:11$4.
  creating $macc cell for $add$fft_magnitude.v:14$13: $auto$alumacc.cc:354:replace_macc$105
  creating $macc cell for $add$fft_magnitude.v:13$10: $auto$alumacc.cc:354:replace_macc$106
  creating $macc cell for $add$fft_magnitude.v:12$7: $auto$alumacc.cc:354:replace_macc$107
  creating $macc cell for $add$fft_magnitude.v:11$4: $auto$alumacc.cc:354:replace_macc$108
  created 0 $alu and 4 $macc cells.
Extracting $alu and $macc cells in module fft_top:
  created 0 $alu and 0 $macc cells.

5.12. Executing SHARE pass (SAT-based resource sharing).
Found 8 cells in module fft_magnitude that may be considered for resource sharing.
  Analyzing resource sharing options for $mul$fft_magnitude.v:14$12 ($mul):
    Found cell that is never activated: $mul$fft_magnitude.v:14$12
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$fft_magnitude.v:14$11 ($mul):
    Found cell that is never activated: $mul$fft_magnitude.v:14$11
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$fft_magnitude.v:13$9 ($mul):
    Found cell that is never activated: $mul$fft_magnitude.v:13$9
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$fft_magnitude.v:13$8 ($mul):
    Found cell that is never activated: $mul$fft_magnitude.v:13$8
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$fft_magnitude.v:12$6 ($mul):
    Found cell that is never activated: $mul$fft_magnitude.v:12$6
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$fft_magnitude.v:12$5 ($mul):
    Found cell that is never activated: $mul$fft_magnitude.v:12$5
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$fft_magnitude.v:11$3 ($mul):
    Found cell that is never activated: $mul$fft_magnitude.v:11$3
    Cell is never active. Sharing is pointless, we simply remove it.
  Analyzing resource sharing options for $mul$fft_magnitude.v:11$2 ($mul):
    Found cell that is never activated: $mul$fft_magnitude.v:11$2
    Cell is never active. Sharing is pointless, we simply remove it.
Removing 8 cells in module fft_magnitude:
  Removing cell $mul$fft_magnitude.v:11$2 ($mul).
  Removing cell $mul$fft_magnitude.v:11$3 ($mul).
  Removing cell $mul$fft_magnitude.v:12$5 ($mul).
  Removing cell $mul$fft_magnitude.v:12$6 ($mul).
  Removing cell $mul$fft_magnitude.v:13$8 ($mul).
  Removing cell $mul$fft_magnitude.v:13$9 ($mul).
  Removing cell $mul$fft_magnitude.v:14$11 ($mul).
  Removing cell $mul$fft_magnitude.v:14$12 ($mul).

5.13. Executing OPT pass (performing simple optimizations).

5.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

5.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_butterfly..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fft_magnitude..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fft_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

5.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_butterfly.
  Optimizing cells in module \fft_magnitude.
  Optimizing cells in module \fft_top.
Performed a total of 0 changes.

5.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

5.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

5.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.13.9. Finished OPT passes. (There is nothing left to do.)

5.14. Executing FSM pass (extract and optimize FSM).

5.14.1. Executing FSM_DETECT pass (finding FSMs in design).

5.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..

5.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

5.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..

5.15.5. Finished fast OPT passes.

5.16. Executing MEMORY pass.

5.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

5.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..

5.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..

5.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
<suppressed ~1 debug messages>
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

5.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_butterfly..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fft_magnitude..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fft_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_butterfly.
  Optimizing cells in module \fft_magnitude.
  Optimizing cells in module \fft_top.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

5.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..

5.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.20.9. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using extmapper maccmap for cells of type $macc.
  add \X2_real [15:8] * \X2_real [15:8] (8x8 bits, unsigned)
  add \X2_imag [15:8] * \X2_imag [15:8] (8x8 bits, unsigned)
  add \X1_real [15:8] * \X1_real [15:8] (8x8 bits, unsigned)
  add \X1_imag [15:8] * \X1_imag [15:8] (8x8 bits, unsigned)
  add \X0_real [15:8] * \X0_real [15:8] (8x8 bits, unsigned)
  add \X0_imag [15:8] * \X0_imag [15:8] (8x8 bits, unsigned)
  add \X3_real [15:8] * \X3_real [15:8] (8x8 bits, unsigned)
  add \X3_imag [15:8] * \X3_imag [15:8] (8x8 bits, unsigned)
Using template $paramod\_90_fa\WIDTH=8 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
No more expansions possible.
<suppressed ~1463 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
<suppressed ~322 debug messages>
Optimizing module fft_magnitude.
<suppressed ~1568 debug messages>
Optimizing module fft_top.

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
<suppressed ~66 debug messages>
Finding identical cells in module `\fft_magnitude'.
<suppressed ~444 debug messages>
Finding identical cells in module `\fft_top'.
Removed a total of 170 cells.

5.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..
Removed 269 unused cells and 1090 unused wires.
<suppressed ~271 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\fft_butterfly' to `<abc-temp-dir>/input.blif'..
Extracted 647 gates and 843 wires to a netlist network with 194 inputs and 161 outputs.

5.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       14
ABC RESULTS:            ANDNOT cells:       57
ABC RESULTS:              AOI3 cells:       35
ABC RESULTS:               MUX cells:      146
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               NOR cells:       11
ABC RESULTS:               NOT cells:       30
ABC RESULTS:              OAI3 cells:       36
ABC RESULTS:                OR cells:       52
ABC RESULTS:             ORNOT cells:       20
ABC RESULTS:              XNOR cells:       39
ABC RESULTS:               XOR cells:       98
ABC RESULTS:        internal signals:      488
ABC RESULTS:           input signals:      194
ABC RESULTS:          output signals:      161
Removing temp directory.

5.23.2. Extracting gate netlist of module `\fft_magnitude' to `<abc-temp-dir>/input.blif'..
Extracted 1095 gates and 1159 wires to a netlist network with 64 inputs and 32 outputs.

5.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      118
ABC RESULTS:            ANDNOT cells:      118
ABC RESULTS:              AOI3 cells:       70
ABC RESULTS:               MUX cells:        5
ABC RESULTS:              NAND cells:       66
ABC RESULTS:               NOR cells:       17
ABC RESULTS:               NOT cells:       23
ABC RESULTS:              OAI3 cells:       15
ABC RESULTS:                OR cells:       29
ABC RESULTS:             ORNOT cells:       16
ABC RESULTS:              XNOR cells:      102
ABC RESULTS:               XOR cells:      281
ABC RESULTS:        internal signals:     1063
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       32
Removing temp directory.

5.23.3. Extracting gate netlist of module `\fft_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
<suppressed ~97 debug messages>
Optimizing module fft_magnitude.
Optimizing module fft_top.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
<suppressed ~24 debug messages>
Finding identical cells in module `\fft_magnitude'.
<suppressed ~21 debug messages>
Finding identical cells in module `\fft_top'.
Removed a total of 15 cells.

5.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..
Removed 1 unused cells and 956 unused wires.
<suppressed ~3 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \fft_top
Used module:     \fft_butterfly
Used module:     \fft_magnitude

5.25.2. Analyzing design hierarchy..
Top module:  \fft_top
Used module:     \fft_butterfly
Used module:     \fft_magnitude
Removed 0 unused modules.

5.26. Printing statistics.

=== fft_butterfly ===

   Number of wires:                420
   Number of wire bits:            838
   Number of public wires:          24
   Number of public wire bits:     292
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                707
     $_ANDNOT_                      57
     $_AND_                         14
     $_AOI3_                        35
     $_DFF_PP0_                      1
     $_DFF_P_                      160
     $_MUX_                        146
     $_NAND_                        17
     $_NOR_                         11
     $_NOT_                         29
     $_OAI3_                        36
     $_ORNOT_                       20
     $_OR_                          52
     $_XNOR_                        36
     $_XOR_                         93

=== fft_magnitude ===

   Number of wires:                838
   Number of wire bits:           1014
   Number of public wires:          13
   Number of public wire bits:     161
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                885
     $_ANDNOT_                     118
     $_AND_                        111
     $_AOI3_                        70
     $_DFF_P_                       32
     $_MUX_                          5
     $_NAND_                        66
     $_NOR_                         17
     $_NOT_                         23
     $_OAI3_                        15
     $_ORNOT_                       16
     $_OR_                          29
     $_XNOR_                       102
     $_XOR_                        281

=== fft_top ===

   Number of wires:                 20
   Number of wire bits:            196
   Number of public wires:          20
   Number of public wire bits:     196
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     fft_butterfly                   1
     fft_magnitude                   1

=== design hierarchy ===

   fft_top                           1
     fft_butterfly                   1
     fft_magnitude                   1

   Number of wires:               1278
   Number of wire bits:           2048
   Number of public wires:          57
   Number of public wire bits:     649
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1592
     $_ANDNOT_                     175
     $_AND_                        125
     $_AOI3_                       105
     $_DFF_PP0_                      1
     $_DFF_P_                      192
     $_MUX_                        151
     $_NAND_                        83
     $_NOR_                         28
     $_NOT_                         52
     $_OAI3_                        51
     $_ORNOT_                       36
     $_OR_                          81
     $_XNOR_                       138
     $_XOR_                        374

5.27. Executing CHECK pass (checking for obvious problems).
checking module fft_butterfly..
checking module fft_magnitude..
checking module fft_top..
found and reported 0 problems.

6. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\fft_butterfly':
  mapped 1 $_DFF_PP0_ cells to \DFFSR cells.
  mapped 160 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\fft_magnitude':
  mapped 32 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\fft_top':

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_butterfly..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fft_magnitude..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fft_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_butterfly.
  Optimizing cells in module \fft_magnitude.
  Optimizing cells in module \fft_top.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_butterfly'.
Finding identical cells in module `\fft_magnitude'.
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

7.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_butterfly..
Finding unused cells or wires in module \fft_magnitude..
Finding unused cells or wires in module \fft_top..

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_butterfly.
Optimizing module fft_magnitude.
Optimizing module fft_top.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\fft_butterfly' to `<abc-temp-dir>/input.blif'..
Extracted 547 gates and 742 wires to a netlist network with 195 inputs and 162 outputs.

8.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       19
ABC RESULTS:           AOI21X1 cells:       43
ABC RESULTS:           AOI22X1 cells:        5
ABC RESULTS:             INVX1 cells:      172
ABC RESULTS:           NAND2X1 cells:      174
ABC RESULTS:           NAND3X1 cells:       12
ABC RESULTS:            NOR2X1 cells:      106
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:      237
ABC RESULTS:           OAI22X1 cells:        6
ABC RESULTS:             OR2X2 cells:        8
ABC RESULTS:           XNOR2X1 cells:       29
ABC RESULTS:            XOR2X1 cells:        6
ABC RESULTS:        internal signals:      385
ABC RESULTS:           input signals:      195
ABC RESULTS:          output signals:      162
Removing temp directory.

8.2. Extracting gate netlist of module `\fft_magnitude' to `<abc-temp-dir>/input.blif'..
Extracted 853 gates and 917 wires to a netlist network with 64 inputs and 32 outputs.

8.2.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       30
ABC RESULTS:           AOI21X1 cells:      126
ABC RESULTS:           AOI22X1 cells:       49
ABC RESULTS:             INVX1 cells:      215
ABC RESULTS:           NAND2X1 cells:      331
ABC RESULTS:           NAND3X1 cells:      354
ABC RESULTS:            NOR2X1 cells:      128
ABC RESULTS:            NOR3X1 cells:       11
ABC RESULTS:           OAI21X1 cells:      231
ABC RESULTS:           OAI22X1 cells:       16
ABC RESULTS:             OR2X2 cells:       27
ABC RESULTS:           XNOR2X1 cells:       35
ABC RESULTS:            XOR2X1 cells:       20
ABC RESULTS:        internal signals:      821
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       32
Removing temp directory.

8.3. Extracting gate netlist of module `\fft_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

9. Executing FLATTEN pass (flatten design).
Using template fft_butterfly for cells of type fft_butterfly.
Using template fft_magnitude for cells of type fft_magnitude.
<suppressed ~2 debug messages>
No more expansions possible.
Deleting now unused module fft_butterfly.
Deleting now unused module fft_magnitude.

10. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 246 unused cells and 1828 unused wires.

11. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port fft_top.X0_mag using BUFX2.
Mapping port fft_top.X1_mag using BUFX2.
Mapping port fft_top.X2_mag using BUFX2.
Mapping port fft_top.X3_mag using BUFX2.
Don't map input port fft_top.clk: Missing option -inpad.
Mapping port fft_top.done using BUFX2.
Don't map input port fft_top.reset: Missing option -inpad.
Don't map input port fft_top.start: Missing option -inpad.
Don't map input port fft_top.x0: Missing option -inpad.
Don't map input port fft_top.x1: Missing option -inpad.
Don't map input port fft_top.x2: Missing option -inpad.
Don't map input port fft_top.x3: Missing option -inpad.

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_top.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fft_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fft_top.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fft_top'.
Removed a total of 0 cells.

12.6. Executing OPT_RMDFF pass (remove dff with constant values).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fft_top..

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fft_top.

12.9. Finished OPT passes. (There is nothing left to do.)

13. Executing BLIF backend.

14. Printing statistics.

=== fft_top ===

   Number of wires:               2106
   Number of wire bits:           2518
   Number of public wires:        2106
   Number of public wire bits:    2518
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2371
     AND2X2                         48
     AOI21X1                       166
     AOI22X1                        54
     BUFX2                          33
     DFFPOSX1                      136
     DFFSR                           1
     INVX1                         356
     NAND2X1                       446
     NAND3X1                       366
     NOR2X1                        228
     NOR3X1                         12
     OAI21X1                       392
     OAI22X1                        22
     OR2X2                          34
     XNOR2X1                        52
     XOR2X1                         25

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 8c3f4593b2
CPU: user 2.02s system 0.05s, MEM: 28.26 MB total, 21.86 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 20% 20x opt_clean (0 sec), 15% 20x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl fft_top_mapped.blif fft_top /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I fft_top_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif fft_top.blif

blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 78 (load 1724.76) from node _128_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 16.7784 (latency = 3355.68 ps)
Top input node fanout is 137 (load 5523.6) from node clk.
Warning 1: load of 1734.76 is 2.07805 times greater than strongest gate INVX8
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 114: load of 268.129 is 2.45344 times greater than strongest gate XNOR2X1
233 gates exceed specified minimum load.
28 buffers were added.
45 gates were changed.

Gate counts by drive strength:

	"" gates	In: 1    	Out: 1    	+0
	"1" gates	In: 2255    	Out: 2210    	-45
	"2" gates	In: 115    	Out: 159    	+44

Number of gates changed: 73
gates resized: 73
blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 13 (load 895.293) from node X3_imag[9],
driven by DFFPOSX1 with strength 313.624 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.36193 (latency = 472.387 ps)
Top input node fanout is 11 (load 604.125) from node clk.
Warning 1: load of 905.293 is 2.167 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 126: load of 268.129 is 2.45344 times greater than strongest gate XNOR2X1
248 gates exceed specified minimum load.
0 buffers were added.
17 gates were changed.

Gate counts by drive strength:

	"" gates	In: 1    	Out: 1    	+0
	"1" gates	In: 2221    	Out: 2221    	+0
	"2" gates	In: 176    	Out: 159    	-17
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 17
gates resized: 17
blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 13 (load 895.293) from node X3_imag[9],
driven by DFFPOSX1 with strength 313.624 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.36193 (latency = 472.387 ps)
Top input node fanout is 11 (load 604.125) from node clk.
Warning 1: load of 905.293 is 2.167 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 142: load of 268.129 is 2.45344 times greater than strongest gate XNOR2X1
264 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 1    	Out: 1    	+0
	"1" gates	In: 2221    	Out: 2221    	+0
	"2" gates	In: 159    	Out: 159    	+0
	"4" gates	In: 17    	Out: 17    	+0
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/tombert/qflow_projects/4fft/synthesis
Files:
   Verilog: /home/tombert/qflow_projects/4fft/synthesis/fft_top.rtl.v
   Verilog: /home/tombert/qflow_projects/4fft/synthesis/fft_top.rtlnopwr.v
   Verilog: /home/tombert/qflow_projects/4fft/synthesis/fft_top.rtlbb.v
   Spice:   /home/tombert/qflow_projects/4fft/synthesis/fft_top.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" fft_top.spc fft_top.xspice

Synthesis script ended on Tue Mar 25 15:53:07 IST 2025
