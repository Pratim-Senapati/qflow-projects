Qflow synthesis logfile created on Tue Apr 1 14:33:48 IST 2025
Running yosys for verilog parsing and synthesis
yosys  -s noc_top.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `noc_top.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/tombert/qflow_results/examples/noc/source/noc_top.v
Parsing Verilog input from `/home/tombert/qflow_results/examples/noc/source/noc_top.v' to AST representation.
Generating RTLIL representation for module `\noc_top'.
/home/tombert/qflow_results/examples/noc/source/noc_top.v:110: Warning: Identifier `\arb_source' is implicitly declared.
/home/tombert/qflow_results/examples/noc/source/noc_top.v:111: Warning: Identifier `\arb_dest' is implicitly declared.
/home/tombert/qflow_results/examples/noc/source/noc_top.v:112: Warning: Identifier `\arb_valid' is implicitly declared.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: fifo_buffer.v
Parsing Verilog input from `fifo_buffer.v' to AST representation.
Generating RTLIL representation for module `\fifo_buffer'.
Warning: Replacing memory \mem with list of registers. See fifo_buffer.v:45
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: processing_element.v
Parsing Verilog input from `processing_element.v' to AST representation.
Generating RTLIL representation for module `\processing_element'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: router.v
Parsing Verilog input from `router.v' to AST representation.
Generating RTLIL representation for module `\router'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: arbiter.v
Parsing Verilog input from `arbiter.v' to AST representation.
Generating RTLIL representation for module `\arbiter'.
Successfully finished Verilog frontend.

7. Executing SYNTH pass.

7.1. Executing HIERARCHY pass (managing design hierarchy).

7.1.1. Analyzing design hierarchy..
Top module:  \noc_top
Used module:     \fifo_buffer
Used module:     \processing_element
Used module:     \router
Used module:     \arbiter

7.1.2. Analyzing design hierarchy..
Top module:  \noc_top
Used module:     \fifo_buffer
Used module:     \processing_element
Used module:     \router
Used module:     \arbiter
Removed 0 unused modules.
Warning: Resizing cell port noc_top.router_inst.dest from 1 bits to 2 bits.
Warning: Resizing cell port noc_top.router_inst.src from 1 bits to 2 bits.
Warning: Resizing cell port noc_top.arb_inst.destination from 1 bits to 2 bits.
Warning: Resizing cell port noc_top.arb_inst.source from 1 bits to 2 bits.

7.2. Executing PROC pass (convert processes to netlists).

7.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 4 dead cases from process $proc$arbiter.v:30$57 in module arbiter.
Marked 10 switch rules as full_case in process $proc$arbiter.v:30$57 in module arbiter.
Marked 8 switch rules as full_case in process $proc$router.v:29$46 in module router.
Marked 3 switch rules as full_case in process $proc$processing_element.v:28$39 in module processing_element.
Removed 2 dead cases from process $proc$fifo_buffer.v:33$5 in module fifo_buffer.
Marked 6 switch rules as full_case in process $proc$fifo_buffer.v:33$5 in module fifo_buffer.
Removed a total of 6 dead cases.

7.2.3. Executing PROC_INIT pass (extract init attributes).

7.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\arbiter.$proc$arbiter.v:30$57'.
Found async reset \rst in `\router.$proc$router.v:29$46'.
Found async reset \rst in `\processing_element.$proc$processing_element.v:28$39'.
Found async reset \rst in `\fifo_buffer.$proc$fifo_buffer.v:33$5'.

7.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\arbiter.$proc$arbiter.v:1$167'.
     1/4: $0\router_data_out[3][7:0]
     2/4: $0\router_data_out[2][7:0]
     3/4: $0\router_data_out[1][7:0]
     4/4: $0\router_data_out[0][7:0]
Creating decoders for process `\arbiter.$proc$arbiter.v:30$57'.
     1/57: $4$mem2reg_rd$\router_data_out$arbiter.v:74$56_DATA[7:0]$161
     2/57: $3$mem2bits$\router_data_out$arbiter.v:74$52[7:0]$154
     3/57: $3$mem2reg_rd$\router_data_out$arbiter.v:74$56_DATA[7:0]$156
     4/57: $3$mem2reg_rd$\router_data_out$arbiter.v:74$56_ADDR[1:0]$155
     5/57: $4$mem2reg_rd$\router_data_out$arbiter.v:64$55_DATA[7:0]$143
     6/57: $3$mem2bits$\router_data_out$arbiter.v:64$51[7:0]$136
     7/57: $3$mem2reg_rd$\router_data_out$arbiter.v:64$55_DATA[7:0]$138
     8/57: $3$mem2reg_rd$\router_data_out$arbiter.v:64$55_ADDR[1:0]$137
     9/57: $4$mem2reg_rd$\router_data_out$arbiter.v:54$54_DATA[7:0]$125
    10/57: $3$mem2bits$\router_data_out$arbiter.v:54$50[7:0]$118
    11/57: $3$mem2reg_rd$\router_data_out$arbiter.v:54$54_DATA[7:0]$120
    12/57: $3$mem2reg_rd$\router_data_out$arbiter.v:54$54_ADDR[1:0]$119
    13/57: $4$mem2reg_rd$\router_data_out$arbiter.v:44$53_DATA[7:0]$107
    14/57: $3$mem2bits$\router_data_out$arbiter.v:44$49[7:0]$100
    15/57: $3$mem2reg_rd$\router_data_out$arbiter.v:44$53_DATA[7:0]$102
    16/57: $3$mem2reg_rd$\router_data_out$arbiter.v:44$53_ADDR[1:0]$101
    17/57: $2$mem2reg_rd$\router_data_out$arbiter.v:74$56_DATA[7:0]$93
    18/57: $2$mem2reg_rd$\router_data_out$arbiter.v:74$56_ADDR[1:0]$92
    19/57: $2$mem2bits$\router_data_out$arbiter.v:74$52[7:0]$85
    20/57: $2$mem2reg_rd$\router_data_out$arbiter.v:64$55_DATA[7:0]$91
    21/57: $2$mem2reg_rd$\router_data_out$arbiter.v:64$55_ADDR[1:0]$90
    22/57: $2$mem2bits$\router_data_out$arbiter.v:64$51[7:0]$84
    23/57: $2$mem2reg_rd$\router_data_out$arbiter.v:54$54_DATA[7:0]$89
    24/57: $2$mem2reg_rd$\router_data_out$arbiter.v:54$54_ADDR[1:0]$88
    25/57: $2$mem2bits$\router_data_out$arbiter.v:54$50[7:0]$83
    26/57: $2$mem2reg_rd$\router_data_out$arbiter.v:44$53_DATA[7:0]$87
    27/57: $2$mem2reg_rd$\router_data_out$arbiter.v:44$53_ADDR[1:0]$86
    28/57: $2$mem2bits$\router_data_out$arbiter.v:44$49[7:0]$82
    29/57: $1$mem2reg_rd$\router_data_out$arbiter.v:74$56_DATA[7:0]$81
    30/57: $1$mem2reg_rd$\router_data_out$arbiter.v:74$56_ADDR[1:0]$80
    31/57: $1$mem2reg_rd$\router_data_out$arbiter.v:64$55_DATA[7:0]$79
    32/57: $1$mem2reg_rd$\router_data_out$arbiter.v:64$55_ADDR[1:0]$78
    33/57: $1$mem2reg_rd$\router_data_out$arbiter.v:54$54_DATA[7:0]$77
    34/57: $1$mem2reg_rd$\router_data_out$arbiter.v:54$54_ADDR[1:0]$76
    35/57: $1$mem2reg_rd$\router_data_out$arbiter.v:44$53_DATA[7:0]$75
    36/57: $1$mem2reg_rd$\router_data_out$arbiter.v:44$53_ADDR[1:0]$74
    37/57: $1$mem2bits$\router_data_out$arbiter.v:74$52[7:0]$73
    38/57: $1$mem2bits$\router_data_out$arbiter.v:64$51[7:0]$72
    39/57: $1$mem2bits$\router_data_out$arbiter.v:54$50[7:0]$71
    40/57: $1$mem2bits$\router_data_out$arbiter.v:44$49[7:0]$70
    41/57: $0$mem2reg_rd$\router_data_out$arbiter.v:74$56_DATA[7:0]$69
    42/57: $0$mem2reg_rd$\router_data_out$arbiter.v:74$56_ADDR[1:0]$68
    43/57: $0$mem2reg_rd$\router_data_out$arbiter.v:64$55_DATA[7:0]$67
    44/57: $0$mem2reg_rd$\router_data_out$arbiter.v:64$55_ADDR[1:0]$66
    45/57: $0$mem2reg_rd$\router_data_out$arbiter.v:54$54_DATA[7:0]$65
    46/57: $0$mem2reg_rd$\router_data_out$arbiter.v:54$54_ADDR[1:0]$64
    47/57: $0$mem2reg_rd$\router_data_out$arbiter.v:44$53_DATA[7:0]$63
    48/57: $0$mem2reg_rd$\router_data_out$arbiter.v:44$53_ADDR[1:0]$62
    49/57: $0$mem2bits$\router_data_out$arbiter.v:74$52[7:0]$61
    50/57: $0$mem2bits$\router_data_out$arbiter.v:64$51[7:0]$60
    51/57: $0$mem2bits$\router_data_out$arbiter.v:54$50[7:0]$59
    52/57: $0$mem2bits$\router_data_out$arbiter.v:44$49[7:0]$58
    53/57: $0\start_idx[1:0]
    54/57: $0\toggle[0:0]
    55/57: $0\valid[0:0]
    56/57: $0\destination[1:0]
    57/57: $0\source[1:0]
Creating decoders for process `\router.$proc$router.v:29$46'.
     1/14: $0\fifo_wr_en[3:0] [3]
     2/14: $0\fifo_wr_en[3:0] [1]
     3/14: $0\fifo_wr_en[3:0] [0]
     4/14: $0\fifo_rd_en[3:0] [3]
     5/14: $0\fifo_rd_en[3:0] [1]
     6/14: $0\fifo_rd_en[3:0] [0]
     7/14: $0\fifo_wr_en[3:0] [2]
     8/14: $0\processing[0:0]
     9/14: $0\fifo_data_in_3[7:0]
    10/14: $0\fifo_data_in_2[7:0]
    11/14: $0\fifo_data_in_1[7:0]
    12/14: $0\fifo_data_in_0[7:0]
    13/14: $0\fifo_rd_en[3:0] [2]
    14/14: $0\buffer[7:0]
Creating decoders for process `\processing_element.$proc$processing_element.v:28$39'.
     1/6: $0\rd_en_d[0:0]
     2/6: $0\busy[0:0]
     3/6: $0\rd_en[0:0]
     4/6: $0\wr_en[0:0]
     5/6: $0\packet_out[7:0]
     6/6: $0\ext_data_out[3:0]
Creating decoders for process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
     1/31: $3$mem2reg_rd$\mem$fifo_buffer.v:53$4_DATA[7:0]$34
     2/31: $3$mem2reg_rd$\mem$fifo_buffer.v:52$3_DATA[7:0]$33
     3/31: $2$mem2reg_rd$\mem$fifo_buffer.v:53$4_DATA[7:0]$32
     4/31: $2$mem2reg_rd$\mem$fifo_buffer.v:53$4_ADDR[1:0]$31
     5/31: $2$mem2reg_rd$\mem$fifo_buffer.v:52$3_DATA[7:0]$30
     6/31: $2$mem2reg_rd$\mem$fifo_buffer.v:52$3_ADDR[1:0]$29
     7/31: $2$mem2reg_wr$\mem$fifo_buffer.v:45$2_ADDR[1:0]$22
     8/31: $2$mem2reg_wr$\mem$fifo_buffer.v:45$2_DATA[7:0]$21
     9/31: $1$mem2reg_rd$\mem$fifo_buffer.v:53$4_DATA[7:0]$17
    10/31: $1$mem2reg_rd$\mem$fifo_buffer.v:53$4_ADDR[1:0]$16
    11/31: $1$mem2reg_rd$\mem$fifo_buffer.v:52$3_DATA[7:0]$15
    12/31: $1$mem2reg_rd$\mem$fifo_buffer.v:52$3_ADDR[1:0]$14
    13/31: $1$mem2reg_wr$\mem$fifo_buffer.v:45$2_ADDR[1:0]$13
    14/31: $1$mem2reg_wr$\mem$fifo_buffer.v:45$2_DATA[7:0]$12
    15/31: $0$mem2reg_rd$\mem$fifo_buffer.v:53$4_DATA[7:0]$11
    16/31: $0$mem2reg_rd$\mem$fifo_buffer.v:53$4_ADDR[1:0]$10
    17/31: $0$mem2reg_rd$\mem$fifo_buffer.v:52$3_DATA[7:0]$9
    18/31: $0$mem2reg_rd$\mem$fifo_buffer.v:52$3_ADDR[1:0]$8
    19/31: $0$mem2reg_wr$\mem$fifo_buffer.v:45$2_ADDR[1:0]$7
    20/31: $0$mem2reg_wr$\mem$fifo_buffer.v:45$2_DATA[7:0]$6
    21/31: $0\mem[3][7:0]
    22/31: $0\count[2:0]
    23/31: $0\mem[2][7:0]
    24/31: $0\mem[1][7:0]
    25/31: $0\mem[0][7:0]
    26/31: $0\wr_ptr[1:0]
    27/31: $0\rd_ptr[1:0]
    28/31: $0\router_data_out[7:0]
    29/31: $0\pe_data_out[7:0]
    30/31: $0\empty[0:0]
    31/31: $0\full[0:0]
Creating decoders for process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
     1/12: $0\dest_id[3][1:0]
     2/12: $0\dest_id[2][1:0]
     3/12: $0\dest_id[1][1:0]
     4/12: $0\dest_id[0][1:0]
     5/12: $0\src_id[3][1:0]
     6/12: $0\src_id[2][1:0]
     7/12: $0\src_id[1][1:0]
     8/12: $0\src_id[0][1:0]
     9/12: $0\pe_data_in[3][3:0]
    10/12: $0\pe_data_in[2][3:0]
    11/12: $0\pe_data_in[1][3:0]
    12/12: $0\pe_data_in[0][3:0]

7.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\arbiter.\router_data_out[0]' from process `\arbiter.$proc$arbiter.v:1$167'.
No latch inferred for signal `\arbiter.\router_data_out[1]' from process `\arbiter.$proc$arbiter.v:1$167'.
No latch inferred for signal `\arbiter.\router_data_out[2]' from process `\arbiter.$proc$arbiter.v:1$167'.
No latch inferred for signal `\arbiter.\router_data_out[3]' from process `\arbiter.$proc$arbiter.v:1$167'.
No latch inferred for signal `\noc_top.\pe_data_in[0]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\pe_data_in[1]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\pe_data_in[2]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\pe_data_in[3]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\src_id[0]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\src_id[1]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\src_id[2]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\src_id[3]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\dest_id[0]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\dest_id[1]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\dest_id[2]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
No latch inferred for signal `\noc_top.\dest_id[3]' from process `\noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.

7.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\arbiter.\source' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$637' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.\destination' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$638' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.\valid' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$639' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2bits$\router_data_out$arbiter.v:44$49' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$640' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.\toggle' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$641' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.\start_idx' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$642' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2bits$\router_data_out$arbiter.v:54$50' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$643' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2bits$\router_data_out$arbiter.v:64$51' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$644' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2bits$\router_data_out$arbiter.v:74$52' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$645' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2reg_rd$\router_data_out$arbiter.v:44$53_ADDR' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$646' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2reg_rd$\router_data_out$arbiter.v:44$53_DATA' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$647' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2reg_rd$\router_data_out$arbiter.v:54$54_ADDR' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$648' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2reg_rd$\router_data_out$arbiter.v:54$54_DATA' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$649' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2reg_rd$\router_data_out$arbiter.v:64$55_ADDR' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$650' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2reg_rd$\router_data_out$arbiter.v:64$55_DATA' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$651' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2reg_rd$\router_data_out$arbiter.v:74$56_ADDR' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$652' with positive edge clock and positive level reset.
Creating register for signal `\arbiter.$mem2reg_rd$\router_data_out$arbiter.v:74$56_DATA' using process `\arbiter.$proc$arbiter.v:30$57'.
  created $adff cell `$procdff$653' with positive edge clock and positive level reset.
Creating register for signal `\router.\fifo_rd_en' using process `\router.$proc$router.v:29$46'.
  created $adff cell `$procdff$654' with positive edge clock and positive level reset.
Creating register for signal `\router.\fifo_wr_en' using process `\router.$proc$router.v:29$46'.
  created $adff cell `$procdff$655' with positive edge clock and positive level reset.
Creating register for signal `\router.\fifo_data_in_0' using process `\router.$proc$router.v:29$46'.
  created $adff cell `$procdff$656' with positive edge clock and positive level reset.
Creating register for signal `\router.\fifo_data_in_1' using process `\router.$proc$router.v:29$46'.
  created $adff cell `$procdff$657' with positive edge clock and positive level reset.
Creating register for signal `\router.\fifo_data_in_2' using process `\router.$proc$router.v:29$46'.
  created $adff cell `$procdff$658' with positive edge clock and positive level reset.
Creating register for signal `\router.\fifo_data_in_3' using process `\router.$proc$router.v:29$46'.
  created $adff cell `$procdff$659' with positive edge clock and positive level reset.
Creating register for signal `\router.\processing' using process `\router.$proc$router.v:29$46'.
  created $adff cell `$procdff$660' with positive edge clock and positive level reset.
Creating register for signal `\router.\buffer' using process `\router.$proc$router.v:29$46'.
  created $adff cell `$procdff$661' with positive edge clock and positive level reset.
Creating register for signal `\processing_element.\ext_data_out' using process `\processing_element.$proc$processing_element.v:28$39'.
  created $adff cell `$procdff$662' with positive edge clock and positive level reset.
Creating register for signal `\processing_element.\packet_out' using process `\processing_element.$proc$processing_element.v:28$39'.
  created $adff cell `$procdff$663' with positive edge clock and positive level reset.
Creating register for signal `\processing_element.\wr_en' using process `\processing_element.$proc$processing_element.v:28$39'.
  created $adff cell `$procdff$664' with positive edge clock and positive level reset.
Creating register for signal `\processing_element.\rd_en' using process `\processing_element.$proc$processing_element.v:28$39'.
  created $adff cell `$procdff$665' with positive edge clock and positive level reset.
Creating register for signal `\processing_element.\busy' using process `\processing_element.$proc$processing_element.v:28$39'.
  created $adff cell `$procdff$666' with positive edge clock and positive level reset.
Creating register for signal `\processing_element.\rd_en_d' using process `\processing_element.$proc$processing_element.v:28$39'.
  created $adff cell `$procdff$667' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.\full' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$668' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.\empty' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$669' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.\pe_data_out' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$670' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.\router_data_out' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$671' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.$mem2reg_wr$\mem$fifo_buffer.v:45$2_DATA' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$672' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.$mem2reg_wr$\mem$fifo_buffer.v:45$2_ADDR' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$673' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.\rd_ptr' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$674' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.\wr_ptr' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$675' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.\mem[0]' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $dff cell `$procdff$676' with positive edge clock.
Creating register for signal `\fifo_buffer.\mem[1]' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $dff cell `$procdff$677' with positive edge clock.
Creating register for signal `\fifo_buffer.\mem[2]' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $dff cell `$procdff$678' with positive edge clock.
Creating register for signal `\fifo_buffer.\count' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$679' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.\mem[3]' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $dff cell `$procdff$680' with positive edge clock.
Creating register for signal `\fifo_buffer.$mem2reg_rd$\mem$fifo_buffer.v:52$3_ADDR' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$681' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.$mem2reg_rd$\mem$fifo_buffer.v:52$3_DATA' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$682' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.$mem2reg_rd$\mem$fifo_buffer.v:53$4_ADDR' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$683' with positive edge clock and positive level reset.
Creating register for signal `\fifo_buffer.$mem2reg_rd$\mem$fifo_buffer.v:53$4_DATA' using process `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
  created $adff cell `$procdff$684' with positive edge clock and positive level reset.

7.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `arbiter.$proc$arbiter.v:1$167'.
Found and cleaned up 13 empty switches in `\arbiter.$proc$arbiter.v:30$57'.
Removing empty process `arbiter.$proc$arbiter.v:30$57'.
Found and cleaned up 7 empty switches in `\router.$proc$router.v:29$46'.
Removing empty process `router.$proc$router.v:29$46'.
Found and cleaned up 4 empty switches in `\processing_element.$proc$processing_element.v:28$39'.
Removing empty process `processing_element.$proc$processing_element.v:28$39'.
Found and cleaned up 5 empty switches in `\fifo_buffer.$proc$fifo_buffer.v:33$5'.
Removing empty process `fifo_buffer.$proc$fifo_buffer.v:33$5'.
Removing empty process `noc_top.$proc$/home/tombert/qflow_results/examples/noc/source/noc_top.v:1$1'.
Cleaned up 29 empty switches.

7.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
<suppressed ~31 debug messages>
Optimizing module router.
<suppressed ~5 debug messages>
Optimizing module processing_element.
<suppressed ~1 debug messages>
Optimizing module fifo_buffer.
<suppressed ~4 debug messages>
Optimizing module noc_top.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \router..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Removed 65 unused cells and 316 unused wires.
<suppressed ~73 debug messages>

7.5. Executing CHECK pass (checking for obvious problems).
checking module arbiter..
checking module fifo_buffer..
checking module noc_top..
checking module processing_element..
checking module router..
found and reported 0 problems.

7.6. Executing OPT pass (performing simple optimizations).

7.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

7.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
<suppressed ~78 debug messages>
Finding identical cells in module `\fifo_buffer'.
<suppressed ~12 debug messages>
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
<suppressed ~3 debug messages>
Finding identical cells in module `\router'.
<suppressed ~36 debug messages>
Removed a total of 43 cells.

7.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$177.
    dead port 2/2 on $mux $procmux$179.
    dead port 2/2 on $mux $procmux$206.
    dead port 2/2 on $mux $procmux$208.
    dead port 2/2 on $mux $procmux$235.
    dead port 2/2 on $mux $procmux$237.
    dead port 2/2 on $mux $procmux$264.
    dead port 2/2 on $mux $procmux$266.
Running muxtree optimizer on module \fifo_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$565.
    dead port 2/2 on $mux $procmux$573.
Running muxtree optimizer on module \noc_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \processing_element..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \router..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$477: \processing -> 1'0
  Analyzing evaluation results.
Removed 10 multiplexer ports.
<suppressed ~39 debug messages>

7.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
  Optimizing cells in module \fifo_buffer.
  Optimizing cells in module \noc_top.
  Optimizing cells in module \processing_element.
  Optimizing cells in module \router.
    New ctrl vector for $mux cell $procmux$477: { }
  Optimizing cells in module \router.
Performed a total of 1 changes.

7.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Finding identical cells in module `\fifo_buffer'.
<suppressed ~3 debug messages>
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
Removed a total of 1 cells.

7.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..
Removed 0 unused cells and 55 unused wires.
<suppressed ~4 debug messages>

7.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

7.6.9. Rerunning OPT passes. (Maybe there is more to do..)

7.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \noc_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \processing_element..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \router..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

7.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
  Optimizing cells in module \fifo_buffer.
  Optimizing cells in module \noc_top.
  Optimizing cells in module \processing_element.
  Optimizing cells in module \router.
Performed a total of 0 changes.

7.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Finding identical cells in module `\fifo_buffer'.
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
Removed a total of 0 cells.

7.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

7.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..

7.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

7.6.16. Finished OPT passes. (There is nothing left to do.)

7.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 30 bits (of 32) from port A of cell arbiter.$mod$arbiter.v:42$95 ($and).
Removed top 30 bits (of 32) from port Y of cell arbiter.$mod$arbiter.v:42$95 ($and).
Removed top 29 bits (of 32) from port B of cell arbiter.$shiftx$arbiter.v:42$96 ($shiftx).
Removed top 31 bits (of 32) from port B of cell arbiter.$add$arbiter.v:47$110 ($add).
Removed top 29 bits (of 32) from port Y of cell arbiter.$add$arbiter.v:47$110 ($add).
Removed top 29 bits (of 32) from port A of cell arbiter.$mod$arbiter.v:47$111 ($and).
Removed top 29 bits (of 32) from port Y of cell arbiter.$mod$arbiter.v:47$111 ($and).
Removed top 28 bits (of 32) from port B of cell arbiter.$shiftx$arbiter.v:52$114 ($shiftx).
Removed top 30 bits (of 32) from port B of cell arbiter.$add$arbiter.v:57$128 ($add).
Removed top 29 bits (of 32) from port Y of cell arbiter.$add$arbiter.v:57$128 ($add).
Removed top 30 bits (of 32) from port B of cell arbiter.$add$arbiter.v:67$146 ($add).
Removed top 29 bits (of 32) from port Y of cell arbiter.$add$arbiter.v:67$146 ($add).
Removed top 29 bits (of 32) from port A of cell arbiter.$mod$arbiter.v:67$147 ($and).
Removed top 29 bits (of 32) from port Y of cell arbiter.$mod$arbiter.v:67$147 ($and).
Removed top 28 bits (of 32) from port B of cell arbiter.$shiftx$arbiter.v:72$150 ($shiftx).
Removed top 30 bits (of 32) from port Y of cell arbiter.$mod$arbiter.v:77$165 ($and).
Removed top 30 bits (of 32) from port A of cell arbiter.$mod$arbiter.v:77$165 ($and).
Removed top 29 bits (of 32) from port B of cell arbiter.$add$arbiter.v:77$164 ($add).
Removed top 30 bits (of 32) from port Y of cell arbiter.$add$arbiter.v:77$164 ($add).
Removed top 2 bits (of 3) from port B of cell arbiter.$add$arbiter.v:77$164 ($add).
Removed top 2 bits (of 8) from mux cell arbiter.$procmux$172 ($pmux).
Removed top 1 bits (of 2) from port B of cell arbiter.$procmux$175_CMP0 ($eq).
Removed top 2 bits (of 8) from mux cell arbiter.$procmux$201 ($pmux).
Removed top 1 bits (of 2) from port B of cell arbiter.$procmux$204_CMP0 ($eq).
Removed top 2 bits (of 8) from mux cell arbiter.$procmux$230 ($pmux).
Removed top 1 bits (of 2) from port B of cell arbiter.$procmux$233_CMP0 ($eq).
Removed top 2 bits (of 8) from mux cell arbiter.$procmux$259 ($pmux).
Removed top 1 bits (of 2) from port B of cell arbiter.$procmux$262_CMP0 ($eq).
Removed top 2 bits (of 8) from wire arbiter.$4$mem2reg_rd$\router_data_out$arbiter.v:44$53_DATA[7:0]$107.
Removed top 2 bits (of 8) from wire arbiter.$4$mem2reg_rd$\router_data_out$arbiter.v:54$54_DATA[7:0]$125.
Removed top 2 bits (of 8) from wire arbiter.$4$mem2reg_rd$\router_data_out$arbiter.v:64$55_DATA[7:0]$143.
Removed top 2 bits (of 8) from wire arbiter.$4$mem2reg_rd$\router_data_out$arbiter.v:74$56_DATA[7:0]$161.
Removed top 29 bits (of 32) from wire arbiter.$add$arbiter.v:47$110_Y.
Removed top 29 bits (of 32) from wire arbiter.$add$arbiter.v:57$128_Y.
Removed top 29 bits (of 32) from wire arbiter.$add$arbiter.v:67$146_Y.
Removed top 30 bits (of 32) from wire arbiter.$add$arbiter.v:77$164_Y.
Removed top 30 bits (of 32) from wire arbiter.$mod$arbiter.v:42$95_Y.
Removed top 29 bits (of 32) from wire arbiter.$mod$arbiter.v:67$147_Y.
Removed top 30 bits (of 32) from wire arbiter.$mod$arbiter.v:77$165_Y.
Removed top 31 bits (of 32) from port B of cell fifo_buffer.$add$fifo_buffer.v:46$24 ($add).
Removed top 30 bits (of 32) from port Y of cell fifo_buffer.$add$fifo_buffer.v:46$24 ($add).
Removed top 31 bits (of 32) from port B of cell fifo_buffer.$add$fifo_buffer.v:47$25 ($add).
Removed top 29 bits (of 32) from port Y of cell fifo_buffer.$add$fifo_buffer.v:47$25 ($add).
Removed top 31 bits (of 32) from port B of cell fifo_buffer.$add$fifo_buffer.v:54$35 ($add).
Removed top 30 bits (of 32) from port Y of cell fifo_buffer.$add$fifo_buffer.v:54$35 ($add).
Removed top 31 bits (of 32) from port B of cell fifo_buffer.$sub$fifo_buffer.v:55$36 ($sub).
Removed top 29 bits (of 32) from port Y of cell fifo_buffer.$sub$fifo_buffer.v:55$36 ($sub).
Removed top 1 bits (of 2) from port B of cell fifo_buffer.$procmux$563_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell fifo_buffer.$procmux$614_CMP0 ($eq).
Removed top 30 bits (of 32) from wire fifo_buffer.$add$fifo_buffer.v:46$24_Y.
Removed top 1 bits (of 2) from port B of cell router.$procmux$410_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell router.$procmux$441_CMP0 ($eq).

7.8. Executing PEEPOPT pass (run peephole optimizers).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..
Removed 0 unused cells and 12 unused wires.
<suppressed ~2 debug messages>

7.10. Executing TECHMAP pass (map to technology primitives).

7.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

7.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~72 debug messages>

7.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module arbiter:
  creating $macc model for $add$arbiter.v:47$110 ($add).
  creating $macc model for $add$arbiter.v:57$128 ($add).
  creating $macc model for $add$arbiter.v:67$146 ($add).
  creating $macc model for $add$arbiter.v:77$164 ($add).
  creating $alu model for $macc $add$arbiter.v:77$164.
  creating $alu model for $macc $add$arbiter.v:67$146.
  creating $alu model for $macc $add$arbiter.v:57$128.
  creating $alu model for $macc $add$arbiter.v:47$110.
  creating $alu cell for $add$arbiter.v:47$110: $auto$alumacc.cc:474:replace_alu$697
  creating $alu cell for $add$arbiter.v:57$128: $auto$alumacc.cc:474:replace_alu$700
  creating $alu cell for $add$arbiter.v:67$146: $auto$alumacc.cc:474:replace_alu$703
  creating $alu cell for $add$arbiter.v:77$164: $auto$alumacc.cc:474:replace_alu$706
  created 4 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module fifo_buffer:
  creating $macc model for $add$fifo_buffer.v:46$24 ($add).
  creating $macc model for $add$fifo_buffer.v:47$25 ($add).
  creating $macc model for $add$fifo_buffer.v:54$35 ($add).
  creating $macc model for $sub$fifo_buffer.v:55$36 ($sub).
  creating $alu model for $macc $sub$fifo_buffer.v:55$36.
  creating $alu model for $macc $add$fifo_buffer.v:54$35.
  creating $alu model for $macc $add$fifo_buffer.v:47$25.
  creating $alu model for $macc $add$fifo_buffer.v:46$24.
  creating $alu cell for $add$fifo_buffer.v:46$24: $auto$alumacc.cc:474:replace_alu$709
  creating $alu cell for $add$fifo_buffer.v:47$25: $auto$alumacc.cc:474:replace_alu$712
  creating $alu cell for $add$fifo_buffer.v:54$35: $auto$alumacc.cc:474:replace_alu$715
  creating $alu cell for $sub$fifo_buffer.v:55$36: $auto$alumacc.cc:474:replace_alu$718
  created 4 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module noc_top:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module processing_element:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module router:
  created 0 $alu and 0 $macc cells.

7.12. Executing SHARE pass (SAT-based resource sharing).

7.13. Executing OPT pass (performing simple optimizations).

7.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

7.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Finding identical cells in module `\fifo_buffer'.
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
Removed a total of 0 cells.

7.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \noc_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \processing_element..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \router..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

7.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
  Optimizing cells in module \fifo_buffer.
  Optimizing cells in module \noc_top.
  Optimizing cells in module \processing_element.
  Optimizing cells in module \router.
Performed a total of 0 changes.

7.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Finding identical cells in module `\fifo_buffer'.
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
Removed a total of 0 cells.

7.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..

7.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

7.13.9. Finished OPT passes. (There is nothing left to do.)

7.14. Executing FSM pass (extract and optimize FSM).

7.14.1. Executing FSM_DETECT pass (finding FSMs in design).

7.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..

7.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.15. Executing OPT pass (performing simple optimizations).

7.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

7.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Finding identical cells in module `\fifo_buffer'.
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
Removed a total of 0 cells.

7.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..

7.15.5. Finished fast OPT passes.

7.16. Executing MEMORY pass.

7.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

7.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..

7.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..

7.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

7.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..

7.18. Executing OPT pass (performing simple optimizations).

7.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
<suppressed ~25 debug messages>
Optimizing module fifo_buffer.
<suppressed ~1 debug messages>
Optimizing module noc_top.
Optimizing module processing_element.
<suppressed ~3 debug messages>
Optimizing module router.
<suppressed ~18 debug messages>

7.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Finding identical cells in module `\fifo_buffer'.
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
Removed a total of 0 cells.

7.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..
Removed 5 unused cells and 24 unused wires.
<suppressed ~9 debug messages>

7.18.5. Finished fast OPT passes.

7.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

7.20. Executing OPT pass (performing simple optimizations).

7.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

7.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Finding identical cells in module `\fifo_buffer'.
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
Removed a total of 0 cells.

7.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo_buffer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \noc_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \processing_element..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \router..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

7.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
  Optimizing cells in module \fifo_buffer.
  Optimizing cells in module \noc_top.
  Optimizing cells in module \processing_element.
  Optimizing cells in module \router.
Performed a total of 0 changes.

7.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Finding identical cells in module `\fifo_buffer'.
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
Removed a total of 0 cells.

7.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..

7.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

7.20.9. Finished OPT passes. (There is nothing left to do.)

7.21. Executing TECHMAP pass (map to technology primitives).

7.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod$constmap:b486ae313fe5b917885e14fe966852512ebdbb83$paramod$9151cf5b9263b16084866b3049250f948fc2eb44\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$constmap:1ef046be63c9541309f2f19c4ef998a798f64488$paramod$ea5aff2679b095cc47fcc46485d6169777684ec6\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=3 for cells of type $alu.
Using template $paramod$constmap:9acf65efafce07f30d628229b1b449d1b18707f7$paramod$3dbe5badf27e40e68a94ecf4525d6b87b291b252\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=2\Y_WIDTH=3 for cells of type $alu.
Using template $paramod$constmap:0a308584856759c2b95a3dbe33949587ebda8943$paramod$244602f8bdde01c3a10e7bdae9c4da54a090dc57\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod\_90_pmux\WIDTH=6\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~1192 debug messages>

7.22. Executing OPT pass (performing simple optimizations).

7.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
<suppressed ~132 debug messages>
Optimizing module fifo_buffer.
<suppressed ~85 debug messages>
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.
<suppressed ~40 debug messages>

7.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
<suppressed ~66 debug messages>
Finding identical cells in module `\fifo_buffer'.
<suppressed ~27 debug messages>
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
<suppressed ~12 debug messages>
Removed a total of 35 cells.

7.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..
Removed 142 unused cells and 505 unused wires.
<suppressed ~145 debug messages>

7.22.5. Finished fast OPT passes.

7.23. Executing ABC pass (technology mapping using ABC).

7.23.1. Extracting gate netlist of module `\arbiter' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 183 wires to a netlist network with 24 inputs and 8 outputs.

7.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:              AOI4 cells:        8
ABC RESULTS:               MUX cells:       60
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:       12
ABC RESULTS:              OAI3 cells:       10
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:      151
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:        8
Removing temp directory.

7.23.2. Extracting gate netlist of module `\fifo_buffer' to `<abc-temp-dir>/input.blif'..
Extracted 185 gates and 263 wires to a netlist network with 77 inputs and 57 outputs.

7.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       26
ABC RESULTS:              AOI3 cells:        8
ABC RESULTS:              AOI4 cells:        8
ABC RESULTS:               MUX cells:       79
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        7
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              OAI3 cells:        8
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:       29
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:      129
ABC RESULTS:           input signals:       77
ABC RESULTS:          output signals:       57
Removing temp directory.

7.23.3. Extracting gate netlist of module `\noc_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

7.23.4. Extracting gate netlist of module `\processing_element' to `<abc-temp-dir>/input.blif'..
Extracted 19 gates and 49 wires to a netlist network with 29 inputs and 15 outputs.

7.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.23.4.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       13
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       15
Removing temp directory.

7.23.5. Extracting gate netlist of module `\router' to `<abc-temp-dir>/input.blif'..
Extracted 204 gates and 292 wires to a netlist network with 86 inputs and 49 outputs.

7.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:              AOI4 cells:        8
ABC RESULTS:               MUX cells:      128
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        2
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:        internal signals:      157
ABC RESULTS:           input signals:       86
ABC RESULTS:          output signals:       49
Removing temp directory.

7.24. Executing OPT pass (performing simple optimizations).

7.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
<suppressed ~20 debug messages>
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.
<suppressed ~40 debug messages>

7.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
<suppressed ~27 debug messages>
Finding identical cells in module `\fifo_buffer'.
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
<suppressed ~3 debug messages>
Removed a total of 10 cells.

7.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..
Removed 2 unused cells and 565 unused wires.
<suppressed ~6 debug messages>

7.24.5. Finished fast OPT passes.

7.25. Executing HIERARCHY pass (managing design hierarchy).

7.25.1. Analyzing design hierarchy..
Top module:  \noc_top
Used module:     \fifo_buffer
Used module:     \processing_element
Used module:     \arbiter
Used module:     \router

7.25.2. Analyzing design hierarchy..
Top module:  \noc_top
Used module:     \fifo_buffer
Used module:     \processing_element
Used module:     \arbiter
Used module:     \router
Removed 0 unused modules.

7.26. Printing statistics.

=== arbiter ===

   Number of wires:                118
   Number of wire bits:            186
   Number of public wires:          17
   Number of public wire bits:      82
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                112
     $_ANDNOT_                       6
     $_AND_                          1
     $_AOI3_                         1
     $_AOI4_                         8
     $_DFF_PP0_                      8
     $_MUX_                         59
     $_NOR_                          2
     $_NOT_                         10
     $_OAI3_                        10
     $_ORNOT_                        2
     $_OR_                           4
     $_XOR_                          1

=== fifo_buffer ===

   Number of wires:                153
   Number of wire bits:            259
   Number of public wires:          19
   Number of public wire bits:      79
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                237
     $_ANDNOT_                      26
     $_AND_                          2
     $_AOI3_                         8
     $_AOI4_                         8
     $_DFF_PP0_                     24
     $_DFF_PP1_                      1
     $_DFF_P_                       32
     $_MUX_                         79
     $_NAND_                         2
     $_NOR_                          7
     $_NOT_                          1
     $_OAI3_                         8
     $_ORNOT_                       29
     $_OR_                           4
     $_XOR_                          6

=== noc_top ===

   Number of wires:                 49
   Number of wire bits:            251
   Number of public wires:          47
   Number of public wire bits:     249
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     arbiter                         1
     fifo_buffer                     4
     processing_element              4
     router                          1

=== processing_element ===

   Number of wires:                 21
   Number of wire bits:             53
   Number of public wires:          14
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     $_DFF_PP0_                     16
     $_MUX_                         13
     $_NOR_                          1
     $_NOT_                          2
     $_OR_                           1

=== router ===

   Number of wires:                151
   Number of wire bits:            263
   Number of public wires:          17
   Number of public wire bits:      88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                224
     $_ANDNOT_                      20
     $_AND_                          2
     $_AOI4_                         8
     $_DFF_PP0_                     49
     $_MUX_                        128
     $_NAND_                         1
     $_NOR_                          2
     $_NOT_                          2
     $_ORNOT_                       12

=== design hierarchy ===

   noc_top                           1
     arbiter                         1
     fifo_buffer                     4
     processing_element              4
     router                          1

   Number of wires:               1014
   Number of wire bits:           1948
   Number of public wires:         213
   Number of public wire bits:     879
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1416
     $_ANDNOT_                     130
     $_AND_                         11
     $_AOI3_                        33
     $_AOI4_                        48
     $_DFF_PP0_                    217
     $_DFF_PP1_                      4
     $_DFF_P_                      128
     $_MUX_                        555
     $_NAND_                         9
     $_NOR_                         36
     $_NOT_                         24
     $_OAI3_                        42
     $_ORNOT_                      130
     $_OR_                          24
     $_XOR_                         25

7.27. Executing CHECK pass (checking for obvious problems).
checking module arbiter..
checking module fifo_buffer..
checking module noc_top..
checking module processing_element..
checking module router..
found and reported 0 problems.

8. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\arbiter':
  mapped 8 $_DFF_PP0_ cells to \DFFSR cells.
Mapping DFF cells in module `\fifo_buffer':
  mapped 24 $_DFF_PP0_ cells to \DFFSR cells.
  mapped 1 $_DFF_PP1_ cells to \DFFSR cells.
  mapped 32 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\noc_top':
Mapping DFF cells in module `\processing_element':
  mapped 16 $_DFF_PP0_ cells to \DFFSR cells.
Mapping DFF cells in module `\router':
  mapped 49 $_DFF_PP0_ cells to \DFFSR cells.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
<suppressed ~21 debug messages>
Finding identical cells in module `\fifo_buffer'.
<suppressed ~72 debug messages>
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
<suppressed ~45 debug messages>
Finding identical cells in module `\router'.
<suppressed ~144 debug messages>
Removed a total of 94 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fifo_buffer..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \noc_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \processing_element..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \router..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
  Optimizing cells in module \fifo_buffer.
  Optimizing cells in module \noc_top.
  Optimizing cells in module \processing_element.
  Optimizing cells in module \router.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Finding identical cells in module `\fifo_buffer'.
Finding identical cells in module `\noc_top'.
Finding identical cells in module `\processing_element'.
Finding identical cells in module `\router'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
Finding unused cells or wires in module \fifo_buffer..
Finding unused cells or wires in module \noc_top..
Finding unused cells or wires in module \processing_element..
Finding unused cells or wires in module \router..
Removed 0 unused cells and 94 unused wires.
<suppressed ~4 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module arbiter.
Optimizing module fifo_buffer.
Optimizing module noc_top.
Optimizing module processing_element.
Optimizing module router.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing ABC pass (technology mapping using ABC).

10.1. Extracting gate netlist of module `\arbiter' to `<abc-temp-dir>/input.blif'..
Extracted 105 gates and 130 wires to a netlist network with 25 inputs and 9 outputs.

10.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:           AOI22X1 cells:       18
ABC RESULTS:             INVX1 cells:       18
ABC RESULTS:            MUX2X1 cells:        2
ABC RESULTS:           NAND2X1 cells:       28
ABC RESULTS:           NAND3X1 cells:       26
ABC RESULTS:            NOR2X1 cells:       13
ABC RESULTS:           OAI21X1 cells:       23
ABC RESULTS:           OAI22X1 cells:        5
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:        internal signals:       96
ABC RESULTS:           input signals:       25
ABC RESULTS:          output signals:        9
Removing temp directory.

10.2. Extracting gate netlist of module `\fifo_buffer' to `<abc-temp-dir>/input.blif'..
Extracted 181 gates and 259 wires to a netlist network with 78 inputs and 58 outputs.

10.2.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:             INVX1 cells:       32
ABC RESULTS:            MUX2X1 cells:       34
ABC RESULTS:           NAND2X1 cells:       38
ABC RESULTS:           NAND3X1 cells:        9
ABC RESULTS:            NOR2X1 cells:       10
ABC RESULTS:           OAI21X1 cells:      119
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           XNOR2X1 cells:        3
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:        internal signals:      123
ABC RESULTS:           input signals:       78
ABC RESULTS:          output signals:       58
Removing temp directory.

10.3. Extracting gate netlist of module `\noc_top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

10.4. Extracting gate netlist of module `\processing_element' to `<abc-temp-dir>/input.blif'..
Extracted 18 gates and 48 wires to a netlist network with 30 inputs and 16 outputs.

10.4.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.4.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       15
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:           OAI21X1 cells:       21
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       16
Removing temp directory.

10.5. Extracting gate netlist of module `\router' to `<abc-temp-dir>/input.blif'..
Extracted 176 gates and 263 wires to a netlist network with 87 inputs and 50 outputs.

10.5.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.5.2. Re-integrating ABC results.
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:             INVX1 cells:       49
ABC RESULTS:            MUX2X1 cells:       24
ABC RESULTS:           NAND2X1 cells:       30
ABC RESULTS:           NAND3X1 cells:       26
ABC RESULTS:            NOR2X1 cells:       10
ABC RESULTS:           OAI21X1 cells:       24
ABC RESULTS:           OAI22X1 cells:        4
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:        internal signals:      126
ABC RESULTS:           input signals:       87
ABC RESULTS:          output signals:       50
Removing temp directory.

11. Executing FLATTEN pass (flatten design).
Using template processing_element for cells of type processing_element.
Using template fifo_buffer for cells of type fifo_buffer.
Using template router for cells of type router.
Using template arbiter for cells of type arbiter.
<suppressed ~10 debug messages>
No more expansions possible.
Deleting now unused module arbiter.
Deleting now unused module fifo_buffer.
Deleting now unused module processing_element.
Deleting now unused module router.

12. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 369 unused cells and 1965 unused wires.

13. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port noc_top.clk: Missing option -inpad.
Don't map input port noc_top.dest: Missing option -inpad.
Don't map input port noc_top.ext_data_in: Missing option -inpad.
Mapping port noc_top.ext_data_out using BUFX2.
Mapping port noc_top.pe_busy using BUFX2.
Don't map input port noc_top.rst: Missing option -inpad.

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_top.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_top'.
Removed a total of 0 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \noc_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \noc_top.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\noc_top'.
Removed a total of 0 cells.

14.6. Executing OPT_RMDFF pass (remove dff with constant values).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \noc_top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module noc_top.

14.9. Finished OPT passes. (There is nothing left to do.)

15. Executing BLIF backend.

16. Printing statistics.

=== noc_top ===

   Number of wires:               1096
   Number of wire bits:           1668
   Number of public wires:        1096
   Number of public wire bits:    1668
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1492
     AND2X2                          5
     AOI21X1                        17
     AOI22X1                        18
     BUFX2                          20
     DFFPOSX1                       96
     DFFSR                         178
     INVX1                         212
     MUX2X1                        124
     NAND2X1                       183
     NAND3X1                        71
     NOR2X1                         61
     OAI21X1                       463
     OAI22X1                         9
     OR2X2                          14
     XNOR2X1                        13
     XOR2X1                          8

Warnings: 8 unique messages, 8 total
End of script. Logfile hash: 1f2acc18b2
CPU: user 1.35s system 0.04s, MEM: 26.21 MB total, 19.24 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 20% 18x opt_clean (0 sec), 12% 22x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl noc_top_mapped.blif noc_top /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 200 -c 30 -I noc_top_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif noc_top.blif

blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 39 (load 1410.36) from node _904_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 13.7199 (latency = 2743.97 ps)
Top input node fanout is 274 (load 6283.06) from node clk.
Warning 1: load of 824.93 is 8.09937 times greater than strongest gate OAI21X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 20: load of 1043.91 is 10.1437 times greater than strongest gate DFFSR
Warning 96: load of 1043.97 is 10.1443 times greater than strongest gate DFFSR
279 gates exceed specified minimum load.
140 buffers were added.
27 gates were changed.

Gate counts by drive strength:

	"" gates	In: 178    	Out: 178    	+0
	"1" gates	In: 1275    	Out: 1248    	-27
	"2" gates	In: 40    	Out: 53    	+13

Number of gates changed: 167
gates resized: 167
blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 15 (load 621.207) from node FIFO_INST[0].fifo_inst.pe_wr_en,
driven by DFFSR with strength 102.912 (fF driven at latency 200)
Top fanout load-to-strength ratio is 4.59937 (latency = 919.874 ps)
Top input node fanout is 42 (load 2306.66) from node clk.
Warning 1: load of 499.785 is 1.19634 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 526.854 is 1.26113 times greater than strongest gate CLKBUF1
Warning 3: load of 553.923 is 1.32593 times greater than strongest gate CLKBUF1
Warning 4: load of 580.992 is 1.39072 times greater than strongest gate CLKBUF1
Warning 44: load of 206.477 is 1.89977 times greater than strongest gate NOR2X1
Warning 50: load of 372.335 is 3.4258 times greater than strongest gate NOR2X1
Warning 198: load of 483.332 is 4.69654 times greater than strongest gate DFFSR
312 gates exceed specified minimum load.
6 buffers were added.
93 gates were changed.

Gate counts by drive strength:

	"" gates	In: 178    	Out: 178    	+0
	"1" gates	In: 1290    	Out: 1290    	+0
	"2" gates	In: 151    	Out: 58    	-93
	"4" gates	In: 5    	Out: 98    	+93
	"8" gates	In: 9    	Out: 9    	+0

Number of gates changed: 99
gates resized: 99
blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 15 (load 621.207) from node FIFO_INST[0].fifo_inst.pe_wr_en,
driven by DFFSR with strength 102.912 (fF driven at latency 200)
Top fanout load-to-strength ratio is 4.59937 (latency = 919.874 ps)
Top input node fanout is 10 (load 1042.71) from node rst.
Warning 1: load of 503.132 is 1.21691 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 18: load of 526.854 is 1.26113 times greater than strongest gate CLKBUF1
Warning 19: load of 553.923 is 1.32593 times greater than strongest gate CLKBUF1
Warning 20: load of 580.992 is 1.39072 times greater than strongest gate CLKBUF1
Warning 109: load of 206.477 is 1.89977 times greater than strongest gate NOR2X1
Warning 115: load of 372.335 is 3.4258 times greater than strongest gate NOR2X1
Warning 266: load of 483.332 is 4.69654 times greater than strongest gate DFFSR
380 gates exceed specified minimum load.
0 buffers were added.
6 gates were changed.

Gate counts by drive strength:

	"" gates	In: 178    	Out: 178    	+0
	"1" gates	In: 1290    	Out: 1290    	+0
	"2" gates	In: 64    	Out: 58    	-6
	"4" gates	In: 98    	Out: 104    	+6
	"8" gates	In: 9    	Out: 9    	+0

Number of gates changed: 6
gates resized: 6
blifFanout for qflow 1.3.17
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 15 (load 635.559) from node FIFO_INST[0].fifo_inst.pe_wr_en,
driven by DFFSR with strength 102.912 (fF driven at latency 200)
Top fanout load-to-strength ratio is 4.59937 (latency = 919.874 ps)
Top input node fanout is 10 (load 1042.71) from node rst.
Warning 1: load of 645.559 is 1.56139 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 109: load of 206.477 is 1.89977 times greater than strongest gate NOR2X1
Warning 115: load of 372.335 is 3.4258 times greater than strongest gate NOR2X1
Warning 266: load of 483.332 is 4.69654 times greater than strongest gate DFFSR
380 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 178    	Out: 178    	+0
	"1" gates	In: 1290    	Out: 1290    	+0
	"2" gates	In: 58    	Out: 58    	+0
	"4" gates	In: 104    	Out: 104    	+0
	"8" gates	In: 9    	Out: 9    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/tombert/qflow_results/examples/noc/synthesis
Files:
   Verilog: /home/tombert/qflow_results/examples/noc/synthesis/noc_top.rtl.v
   Verilog: /home/tombert/qflow_results/examples/noc/synthesis/noc_top.rtlnopwr.v
   Verilog: /home/tombert/qflow_results/examples/noc/synthesis/noc_top.rtlbb.v
   Spice:   /home/tombert/qflow_results/examples/noc/synthesis/noc_top.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" noc_top.spc noc_top.xspice

Synthesis script ended on Tue Apr 1 14:33:50 IST 2025
